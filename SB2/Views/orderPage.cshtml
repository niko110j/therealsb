@using Umbraco.Cms.Web.Common.PublishedModels
@using Umbraco.Cms.Core.Models.Blocks
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Extensions

@{
    Layout = "master.cshtml";
    var bookingTypes = Model.Value<BlockListModel>("bookingTypes");
}

<h2>Opret Ny Ordre</h2>

<form asp-controller="Order" asp-action="CreateOrder" method="post" enctype="multipart/form-data">

    <fieldset>
        <legend>Kundeoplysninger</legend>
        <label for="ClientName">Navn:</label>
        <input type="text" id="ClientName" name="ClientName" required />

        <label for="ClientEmail">Email:</label>
        <input type="email" id="ClientEmail" name="ClientEmail" required />

        <label for="ClientPhone">Telefon:</label>
        <input type="tel" id="ClientPhone" name="ClientPhone" />
    </fieldset>

    <fieldset>
        <legend>Sælgeroplysninger</legend>
        <label for="SalespersonName">Sælgernavn:</label>
        <input type="text" id="SalespersonName" name="SalespersonName" />
    </fieldset>

    <fieldset>
        <legend>Udfyldt af</legend>
        <label for="FilledBy">Udfyldt af:</label>
        <input type="text" id="FilledBy" name="FilledBy" />
    </fieldset>

    @if (bookingTypes != null && bookingTypes.Any())
    {
        <label for="bookingTypeSelect">Vælg bookingtype:</label>
        <select id="bookingTypeSelect" name="BookingType">
            <option value="">-- Vælg bookingtype --</option>
            @foreach (var bookingType in bookingTypes)
            {
                <option value="bookingType_@bookingType.Content.Key">
                    @(bookingType.Content.Value<string>("BookingTypeName"))
                </option>
            }
        </select>

        @foreach (var bookingType in bookingTypes)
        {
            var typeKey = $"bookingType_{bookingType.Content.Key}";
            var fields = bookingType.Content.Value<BlockListModel>("bookingFields");

            <div class="booking-fields" id="@typeKey" style="display:none;">
                <h4>@(bookingType.Content.Value<string>("title"))</h4>

                @foreach (var field in fields)
                {
                    var label = field.Content.Value<string>("fieldLabel");
                    var type = field.Content.Value<string>("fieldType");
                    var isRequired = field.Content.Value<bool>("isRequired");
                    var name = Html.Raw(label.Replace(" ", "_").ToLower());

                    <div class="form-group">
                        <label>@label</label>

                        @switch (type?.ToLowerInvariant())
                        {
                            case "text":
                                <input type="text" name="@name" class="form-control" @(isRequired ? "required" : "") />
                                break;
                            case "number":
                                <input type="number" name="@name" class="form-control" @(isRequired ? "required" : "") />
                                break;
                            case "textarea":
                                <textarea name="@name" class="form-control" @(isRequired ? "required" : "")></textarea>
                                break;
                            case "date":
                                <input type="date" name="@name" class="form-control" @(isRequired ? "required" : "") />
                                break;
                            case "dropdown":
                                var options = field.Content.Value<string>("options")?.Split(',') ?? Array.Empty<string>();
                                <select name="@name" class="form-control" @(isRequired ? "required" : "")>
                                    @foreach (var option in options)
                                    {
                                        <option value="@option.Trim()">@option.Trim()</option>
                                    }
                                </select>
                                break;
                            default:
                                <input type="text" name="@name" class="form-control" />
                                break;
                        }
                    </div>
                }
            </div>
        }
    }

    <button type="submit">Opret ordre</button>
</form>


@section Scripts {

    <script>
        document.getElementById('bookingTypeSelect')?.addEventListener('change', function () {
            const selectedId = this.value;

            document.querySelectorAll('.booking-fields').forEach(el => {
                const isVisible = el.id === selectedId;

                // Show or hide the container
                el.style.display = isVisible ? 'block' : 'none';

                // Enable or disable all form fields inside
                el.querySelectorAll('input, select, textarea').forEach(input => {
                    input.disabled = !isVisible;
                });
            });
        });

        // Optionally trigger it on page load (to handle preselected value)
        document.getElementById('bookingTypeSelect')?.dispatchEvent(new Event('change'));
    </script>


}



<style>
    .order-form {
        max-width: 600px;
        margin: 0 auto;
    }

    fieldset {
        margin-bottom: 2rem;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    label {
        display: block;
        margin-top: 1rem;
    }

    input {
        width: 100%;
        padding: 0.5rem;
        margin-top: 0.3rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        padding: 0.7rem 1.5rem;
        background-color: #007acc;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        button:hover {
            background-color: #005fa3;
        }
</style>