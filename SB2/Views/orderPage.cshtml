@using Umbraco.Cms.Web.Common.PublishedModels
@inject Umbraco.Cms.Core.Services.IMemberService MemberService
@using Umbraco.Cms.Core.Models.Blocks
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Extensions

@{
    Layout = "master.cshtml";
    var bookingTypes = Model.Value<BlockListModel>("bookingTypes");
    var members = MemberService.GetAllMembers().Where(m => m.ContentTypeAlias == "salesMember");
    var companies = MemberService.GetAllMembers().Where(m=> m.ContentTypeAlias == "companyMember");
}
<div class="container">

<h2>Opret Ny Ordre</h2>

<form asp-controller="Order" asp-action="CreateOrder" method="post" enctype="multipart/form-data">

    <fieldset>
        <legend>Kundeoplysninger</legend>
        <label for="ClientName">Firma:</label>
            <select id="ClientName" name="ClientName">
                <option value="">Vælg Firma</option>
                @foreach (var company in companies)
                {
                    <option value="@company.Name" data-email="@company.Email">@company.Name </option>
                }
            </select>
            <p>Er firmaet ikke her? Kontakt administrator for at oprette dem i systemet.</p>

            <div id="emailWrapper" style="display: none;">
                <label for="ClientEmail">Email:</label>
                <input type="email" id="ClientEmail" name="ClientEmail" required />
            </div>

            
       
    </fieldset>

    <fieldset>
        <legend>Sælgeroplysninger</legend>
            <label for="SalespersonName">Oprettet af:</label>
            <select id="SalespersonName" name="SalespersonName">
                <option value="">Vælg sælger</option>
                @foreach (var member in members)
                {
                    <option value="@member.Username">@member.Name - @member.Username</option>
                }
            </select>
           <label for="FilledBy">Udfyldt af:</label>
            <select id="FilledBy" name="FilledBy">
                <option value="">Vælg dit navn her</option>
                @foreach (var member in members)
                {
                    <option value="@member.Username">@member.Name - @member.Username</option>
                }
            </select>
    </fieldset>

    <fieldset>

    @if (bookingTypes != null && bookingTypes.Any())
    {
        <label for="bookingTypeSelect">Vælg bookingtype:</label>
        <select id="bookingTypeSelect" name="BookingType">
            <option value="">-- Vælg bookingtype --</option>
            @foreach (var bookingType in bookingTypes)
            {
                <option value="@(bookingType.Content.Value<string>("bookingTypeName"))"
                        data-fields-id="bookingType_@bookingType.Content.Key">
                    @(bookingType.Content.Value<string>("BookingTypeName"))
                </option>
              

            }
        </select>

        @foreach (var bookingType in bookingTypes)
        {
            var typeKey = $"bookingType_{bookingType.Content.Key}";
            var fields = bookingType.Content.Value<BlockListModel>("bookingFields");

            <div class="booking-fields" id="bookingType_@bookingType.Content.Key" style="display:none;">
                <h4>@(bookingType.Content.Value<string>("title"))</h4>

                @foreach (var field in fields)
                {
                    var label = field.Content.Value<string>("fieldLabel");
                    var type = field.Content.Value<string>("fieldType");
                    var isRequired = field.Content.Value<bool>("isRequired");
                    var name = label.Replace(" ", "_").ToLowerInvariant();


                    <div class="form-group">
                        <label>@label</label>

                        @switch (type?.ToLowerInvariant())
                        {
                            case "text":
                                <input type="text" name="BookingFields[@name]" class="form-control" @(isRequired ? "required" : "") />
                                break;
                            case "number":
                                <input type="number" name="BookingFields[@name]" class="form-control" @(isRequired ? "required" : "") />
                                break;
                            case "textarea":
                                <textarea name="BookingFields[@name]" class="form-control" @(isRequired ? "required" : "")></textarea>
                                break;
                            case "date":
                                <input type="date" name="BookingFields[@name]" class="form-control" @(isRequired ? "required" : "") />
                                break;
                            case "dropdown":
                                var options = field.Content.Value<string>("DropdownOptions")?.Split(',') ?? Array.Empty<string>();
                                <select name="BookingFields[@name]" class="form-control" @(isRequired ? "required" : "")>
                                    @foreach (var option in options)
                                    {
                                        <option value="@option.Trim()">@option.Trim()</option>
                                    }
                                </select>
                                break;
                            default:
                                <input type="text" name="BookingFields[@name]" class="form-control" />
                                break;
                        }
                    </div>
                }
            </div>
        }
    } </fieldset>
    <fieldset>
            <label for="Status">Vælg status her:</label>
            <select id="Status" name="Status">
                <option value="">Vælg status her</option>             
                    <option value="Kladde">Gem som kladde</option>
                    <option value="Sendt Til Booker">Send til booker</option>
            </select>
    </fieldset>

    <button type="submit" class="btn">Opret ordre</button>
</form>
</div>

@section Scripts {

    <script>
        document.getElementById('bookingTypeSelect')?.addEventListener('change', function () {
            const selectedOption = this.options[this.selectedIndex];
            const selectedId = selectedOption.getAttribute("data-fields-id");

            document.querySelectorAll('.booking-fields').forEach(el => {
                const isVisible = el.id === selectedId;

                // Show or hide the container
                el.style.display = isVisible ? 'block' : 'none';

                // Enable or disable all form fields inside
                el.querySelectorAll('input, select, textarea').forEach(input => {
                    input.disabled = !isVisible;
                });
            });
        });

        document.getElementById('bookingTypeSelect')?.dispatchEvent(new Event('change'));

        document.getElementById('ClientName')?.addEventListener('change', function () {
            const selectedOption = this.options[this.selectedIndex];
            const email = selectedOption.getAttribute('data-email') || '';
            const emailWrapper = document.getElementById('emailWrapper');
            const emailInput = document.getElementById('ClientEmail');

            if (email && selectedOption.value) {
                emailWrapper.style.display = 'block';
                emailInput.value = email;
            } else {
                emailWrapper.style.display = 'none';
                emailInput.value = '';
            }
        });
    </script> 
    }








